### Dictionary of Codons and AAs
def codict():
    with open("C:/Users/Klumpi/Desktop/Codon_Table.txt", "r") as file:
        filelist = file.read().split()
        codict = {}
        for codon in range(0, len(filelist), 2):
            codict[filelist[codon]] = filelist[codon+1]
        return (codict)
        file.close()

### Input function for many FASTA codes
def fasta_codes_input(filename):
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        lines = file.read().split()
        index = 1
        fasta = lines[0]
        codes_dict = {}
        code_list = []
        
        while index < len(lines):
            if index == len(lines) - 1:
                code_list.append(lines[index])
                codes_dict[fasta] = "".join(code_list)
                return codes_dict
                
            if ">" not in lines[index]:
                code_list.append(lines[index])
                index += 1

            else:
                codes_dict[fasta] = "".join(code_list)
                fasta = lines[index]
                code_list = []
                index += 1
    

### SSEQ
### Finding a Spliced Motif
1)
def recSSEQ(code, sub,l, indices = []):
    
    if len(sub) == 1:
        for base in range(len(code)):
            if code[base] == sub[0]:
                indices.append(base + 1 + (l - len(code)))
                return indices
    else:
        for base in range(len(code)):
            if code[base] == sub[0]:
                indices.append(base + 1 + (l - len(code)))
                code = code[base + 1:]
                sub = sub[1:]
                return recSSEQ(code, sub,l, indices)

2)
def SSEQ(filename):
    codes = list(fasta_codes_input(filename).values())
    String = codes[0]
    length = len(String)
    substring = codes[1]
    output = recSSEQ(String, substring, length)
    return output


### GRPH
### Overlap Graphs

def directedGraph(filename):
    from itertools import permutations
    
    dicty = fasta_codes_input(filename)
    tuples = []
    
   
    combs = list(permutations(dicty,2))
    for comb in combs:
        if dicty[comb[0]][-3:] == dicty[comb[1]][:3]:
            tuples.append(comb)
    return tuples        

for tupl in directedGraph("grph"):
    print(*tupl)


### TRAN
### Transitions and Transversions

def tran(filename):
    dicty = fasta_codes_input(filename)
    codes = list(dicty.values())
    s1 = codes[0]
    print (s1)
    s2 = codes[1]
    print (s2)
    pur = ["A","G"]
    pyr = ["C", "T"]
    transversions = 0
    transitions = 0
    for base in range(len(s1)):
        if s1[base] != s2[base]:
            if s1[base] == "A":
                if s2[base] in pur:
                    transitions += 1
                elif s2[base] in pyr:
                    transversions += 1
            elif s1[base] == "G":
                if s2[base] in pur:
                    transitions += 1
                elif s2[base] in pyr:
                    transversions += 1
            elif s1[base] == "C":
                if s2[base] in pur:
                    transversions += 1
                elif s2[base] in pyr:
                    transitions += 1
            elif s1[base] == "T":
                if s2[base] in pur:
                    transversions += 1
                elif s2[base] in pyr:
                    transitions += 1 
    return transitions/transversions


### ORF
### Open Reading Frames

def ORF(filename):
    import re
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        lines = file.read().splitlines()
        code = "".join(lines[1:])
        rc = reverseComplement(code).replace("T", "U")
        code = code.replace("T", "U")
        codeORFs = re.findall("(?=((AUG)(...)*?(?=(UGA|UAA|UAG))))", code)
        rcORFs = re.findall("(?=((AUG)(...)*?(?=(UGA|UAA|UAG))))", rc)
        proteins = set()
        
        for i in codeORFs:
            Seq = i[0]
            protein = ""
            count = 2
            while count <= len(Seq):
                cod = Seq[count-2] + Seq[count - 1] + Seq[count]
                protein += Codict[cod]
                count += 3
            proteins.add(protein)
        for i in rcORFs:
            Seq = i[0]
            protein = ""
            count = 2
            while count <= len(Seq):
                cod = Seq[count-2] + Seq[count - 1] + Seq[count]
                protein += Codict[cod]
                count += 3
            proteins.add(protein)
        return(proteins)


### TREE
### Completing a Tree
1) 
def read(filename, n):
    output = []
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        f = file.read().splitlines()
        edges = []
        nodes = []
        for i in f:
            nodes.extend(list(map(int, i.split(" "))))
            edges.append(tuple(map(int, i.split(" "))))
        nodes = set(nodes)
        output.append(edges)
        if len(nodes) < n:
            lones = n - len(nodes)
        output.append(lones)
    return output

2)
def tree(edges, lones):
    for i in edges:
        print (i)
        G.add_edge(str(i[0]), str(i[1]))
    return (nx.number_connected_components(G) + lones -1)


### INOD
### Counting Phylogenetic Ancestors

def inod(n):
    internal_nodes = n-2
    return internal_nodes


### PDST
### Creating a Distance Matrix

def pdis(A, B):
    if A == B: return 0.0000
    else:
        count = 0
        for i in range(len(A)):
            if A[i] != B[i]:
                count += 1
        return count/len(A)

def pdst(filename):
    stringdict = fasta_codes_input(filename)
    n = len(stringdict)
    strings = list(stringdict.values())
    dmat = [[0 for x in range(n)] for y in range(n)]
    for i in range(len(strings)):
        for j in range(len(strings)):
            dmat[i][j] = '%.5f' %(pdis(strings[i], strings[j]))
    return dmat
 
 
 ### LCSQ
 ### Finding a Shared Spliced Motif 
 
 def dlcs(A, B, matrix):
    for i in range(1,len(A)+1):
        for j in range(1,len(B)+1):
            if j == len(B)+1:
                break
            else:
                if A[i-1] == B[j-1]:
                    matrix[i][j] = (1 + matrix[i-1][j-1]) #matrix[i-1][j], matrix[i][j-1])
                else:
                    matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) # matrix[i-1][j-1]
    i = len(A)
    j = len(B)
    seq = ""
    counter_ifs = 0
    counter_elses = 0
    while i > 0 and j > 0:
        up = matrix[i-1][j]
        left = matrix[i][j-1]
        diag = matrix[i-1][j-1]
        pos = matrix[i][j]
        if pos > up and pos > left:
            if A[i-1] == B[j-1]:
                seq += A[i-1]
            i -= 1
            j -= 1
        elif up > left:
            i -= 1
        else:
            j -= 1
    return (seq[::-1])
    
seqs = list(fasta_codes_input("lcsq").values())
A = seqs[0]
B = seqs[1]
mat = []
for row in range(len(A)+1):
    tmp = []
    for col in range(len(B)+1):
        tmp.append(0)
    mat.append(tmp)    


### HAMM
###
def hamm(filename):
    count = 0
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        lines = file.readlines()
        code1 = lines[0]
        code2 = lines[1]
        for base in range(len(code1)):
            if code1[base] != code2[base]:
                count += 1
    return count


### PERM
###
def perm(n):
    output = []
    from itertools import permutations
    List = list(range(1, n+1))
    perm = permutations(List)
    for i in list(perm):
        output.append(list(i))
    return output  

def prot(filename, codict = codict):
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        string = file.read()[:-1]
        protein = ""
        for codon in range(0, len(filelist), 2):
            codict[filelist[codon]] = filelist[codon+1]
        for codon in range(2, len(string), 3):
            if codict[string[codon-2] + string[codon-1] + string[codon]] != "Stop":
                protein += codict[string[codon-2] + string[codon-1] + string[codon]]
            else:
                return protein   


### SPLC
###
def splc(filename):
    dicty = fasta_codes_input(filename)
    codons = codict()
    main_code = list(dicty.values())[0]
    introns = list(dicty.values())[1:]   
    for intron in introns:
        if intron in main_code:
            main_code = main_code.replace(intron, "")
    main_code = RNA(main_code)
    protein = ""
    for codon in range(2, len(main_code), 3):
        if codons[main_code[codon-2] + main_code[codon-1] + main_code[codon]] != "Stop":
            protein += codons[main_code[codon-2] + main_code[codon-1] + main_code[codon]]
        else:
            break
    return protein
    
