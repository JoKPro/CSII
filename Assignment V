### SSEQ
### Finding a Spliced Motif
1)
def recSSEQ(code, sub,l, indices = []):
    
    if len(sub) == 1:
        for base in range(len(code)):
            if code[base] == sub[0]:
                indices.append(base + 1 + (l - len(code)))
                return indices
    else:
        for base in range(len(code)):
            if code[base] == sub[0]:
                indices.append(base + 1 + (l - len(code)))
                code = code[base + 1:]
                sub = sub[1:]
                return recSSEQ(code, sub,l, indices)

2)
def SSEQ(filename):
    codes = list(fasta_codes_input(filename).values())
    String = codes[0]
    length = len(String)
    substring = codes[1]
    output = recSSEQ(String, substring, length)
    return output


### GRPH
### Overlap Graphs

def directedGraph(filename):
    from itertools import permutations
    
    dicty = fasta_codes_input(filename)
    tuples = []
    
   
    combs = list(permutations(dicty,2))
    for comb in combs:
        if dicty[comb[0]][-3:] == dicty[comb[1]][:3]:
            tuples.append(comb)
    return tuples        

for tupl in directedGraph("grph"):
    print(*tupl)


### TRAN
### Transitions and Transversions

def tran(filename):
    dicty = fasta_codes_input(filename)
    codes = list(dicty.values())
    s1 = codes[0]
    print (s1)
    s2 = codes[1]
    print (s2)
    pur = ["A","G"]
    pyr = ["C", "T"]
    transversions = 0
    transitions = 0
    for base in range(len(s1)):
        if s1[base] != s2[base]:
            if s1[base] == "A":
                if s2[base] in pur:
                    transitions += 1
                elif s2[base] in pyr:
                    transversions += 1
            elif s1[base] == "G":
                if s2[base] in pur:
                    transitions += 1
                elif s2[base] in pyr:
                    transversions += 1
            elif s1[base] == "C":
                if s2[base] in pur:
                    transversions += 1
                elif s2[base] in pyr:
                    transitions += 1
            elif s1[base] == "T":
                if s2[base] in pur:
                    transversions += 1
                elif s2[base] in pyr:
                    transitions += 1 
    return transitions/transversions


### ORF
### Open Reading Frames

def ORF(filename):
    import re
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        lines = file.read().splitlines()
        code = "".join(lines[1:])
        rc = reverseComplement(code).replace("T", "U")
        code = code.replace("T", "U")
        codeORFs = re.findall("(?=((AUG)(...)*?(?=(UGA|UAA|UAG))))", code)
        rcORFs = re.findall("(?=((AUG)(...)*?(?=(UGA|UAA|UAG))))", rc)
        proteins = set()
        
        for i in codeORFs:
            Seq = i[0]
            protein = ""
            count = 2
            while count <= len(Seq):
                cod = Seq[count-2] + Seq[count - 1] + Seq[count]
                protein += Codict[cod]
                count += 3
            proteins.add(protein)
        for i in rcORFs:
            Seq = i[0]
            protein = ""
            count = 2
            while count <= len(Seq):
                cod = Seq[count-2] + Seq[count - 1] + Seq[count]
                protein += Codict[cod]
                count += 3
            proteins.add(protein)
        return(proteins)


### TREE
### Completing a Tree
1) 
def read(filename, n):
    output = []
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        f = file.read().splitlines()
        edges = []
        nodes = []
        for i in f:
            nodes.extend(list(map(int, i.split(" "))))
            edges.append(tuple(map(int, i.split(" "))))
        nodes = set(nodes)
        output.append(edges)
        if len(nodes) < n:
            lones = n - len(nodes)
        output.append(lones)
    return output

2)
def tree(edges, lones):
    for i in edges:
        print (i)
        G.add_edge(str(i[0]), str(i[1]))
    return (nx.number_connected_components(G) + lones -1)


### INOD
### Counting Phylogenetic Ancestors

def inod(n):
    internal_nodes = n-2
    return internal_nodes


### PDST
### Creating a Distance Matrix

def pdis(A, B):
    if A == B: return 0.0000
    else:
        count = 0
        for i in range(len(A)):
            if A[i] != B[i]:
                count += 1
        return count/len(A)

def pdst(filename):
    stringdict = fasta_codes_input(filename)
    n = len(stringdict)
    strings = list(stringdict.values())
    dmat = [[0 for x in range(n)] for y in range(n)]
    for i in range(len(strings)):
        for j in range(len(strings)):
            dmat[i][j] = '%.5f' %(pdis(strings[i], strings[j]))
    return dmat
    
