### DNA
### Counting DNA Nucleotides
def nuccount(s):
    counts = []
    counts.append(str(s.count("A")))
    counts.append(str(s.count("C")))
    counts.append(str(s.count("G")))
    counts.append(str(s.count("T")))
    return " ".join(counts)


### RNA
### Transcribing DNA into RNA
def RNA(s):
    return s.replace("T", "U")


### REVC
### Complementing a Strand of DNA
def reverseComplement(s):
    s = list(s[::-1])
    print (s)
    for base in range(len(s)):
        if s[base] == "A": s[base] = "T"
        elif s[base] == "T": s[base] = "A"    
        elif s[base] == "C": s[base] = "G" 
        elif s[base] == "G": s[base] = "C"                 
    return "".join(s)


### GC
### Computing GC content
def gc(filename):
    output = []
    fasta = {}
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        lines = file.readlines()
        fastdict = {}
        fastacodes = []
        codes = []
        codeslength = len(codes)
        code_indices = [i for i, x in enumerate(lines) if ">" in x]
        for line in lines:
            if line.startswith(">"):
                fastacodes.append(line[:-1])
            else:
                codes.append(line[:-1])
        for index in range(len(code_indices)):
            if code_indices[index] != code_indices[-1]:
                length = abs(code_indices[index]-code_indices[index+1])-1
                code = "".join(codes[:length])
                codes = codes[length:]
                Gcount = code.count("G")
                Ccount = code.count("C")
                value = (Gcount + Ccount)/len(code)
                fastdict[value] = fastacodes[index]
            else:
                code = "".join(codes)
                Gcount = code.count("G")
                Ccount = code.count("C")
                value = (Gcount + Ccount)/len(code)
                fastdict[value] = fastacodes[index]
        x = sorted(fastdict, reverse = True)
        
        output.append(fastdict[x[0]][1:])
        output.append(x[0]*100)
        return output


### hamm
### counting point mutations

def hamm(filename):
    count = 0
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        lines = file.readlines()
        code1 = lines[0]
        code2 = lines[1]
        for base in range(len(code1)):
            if code1[base] != code2[base]:
                count += 1
    return count


### prot
### translating rna into protein

1.) creating codict (Codon dictionary):
with open("C:/Users/Klumpi/Desktop/Codon_Table.txt", "r") as file:
    filelist = file.read().split()
    codict = {}
    for codon in range(0, len(filelist), 2):
        codict[filelist[codon]] = filelist[codon+1]
    print (codict)
    file.close()

2.) prot function
def prot(filename, codict = codict):
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        string = file.read()[:-1]
        protein = ""
        for codon in range(0, len(filelist), 2):
            codict[filelist[codon]] = filelist[codon+1]
        for codon in range(2, len(string), 3):
            if codict[string[codon-2] + string[codon-1] + string[codon]] != "Stop":
                protein += codict[string[codon-2] + string[codon-1] + string[codon]]
            else:
                return protein

### subs
### finding a motif in DNA
def subs(filename):
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        lines = file.read().split()
        code =  lines[0]
        substring = lines[1]
        file.close()
        indices = []
        while code.find(substring) != -1:
            index = code.find(substring)+1
            indices.append(index)
            code = code[index:]
        print (indices)
        
        for index in range(len(indices)-1):
            indices[index+1] += indices[index]
        return indices
 
                
                
        
       
    
    
    
