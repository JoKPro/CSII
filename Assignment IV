### DNA
### Counting DNA Nucleotides
def nuccount(s):
    counts = []
    counts.append(str(s.count("A")))
    counts.append(str(s.count("C")))
    counts.append(str(s.count("G")))
    counts.append(str(s.count("T")))
    return " ".join(counts)


### RNA
### Transcribing DNA into RNA
def RNA(s):
    return s.replace("T", "U")


### REVC
### Complementing a Strand of DNA
def reverseComplement(s):
    s = list(s[::-1])
    print (s)
    for base in range(len(s)):
        if s[base] == "A": s[base] = "T"
        elif s[base] == "T": s[base] = "A"    
        elif s[base] == "C": s[base] = "G" 
        elif s[base] == "G": s[base] = "C"                 
    return "".join(s)


### GC
### Computing GC content
def gc(filename):
    output = []
    fasta = {}
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        lines = file.readlines()
        fastdict = {}
        fastacodes = []
        codes = []
        codeslength = len(codes)
        code_indices = [i for i, x in enumerate(lines) if ">" in x]
        for line in lines:
            if line.startswith(">"):
                fastacodes.append(line[:-1])
            else:
                codes.append(line[:-1])
        for index in range(len(code_indices)):
            if code_indices[index] != code_indices[-1]:
                length = abs(code_indices[index]-code_indices[index+1])-1
                code = "".join(codes[:length])
                codes = codes[length:]
                Gcount = code.count("G")
                Ccount = code.count("C")
                value = (Gcount + Ccount)/len(code)
                fastdict[value] = fastacodes[index]
            else:
                code = "".join(codes)
                Gcount = code.count("G")
                Ccount = code.count("C")
                value = (Gcount + Ccount)/len(code)
                fastdict[value] = fastacodes[index]
        x = sorted(fastdict, reverse = True)
        
        output.append(fastdict[x[0]][1:])
        output.append(x[0]*100)
        return output


### hamm
### counting point mutations

def hamm(filename):
    count = 0
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        lines = file.readlines()
        code1 = lines[0]
        code2 = lines[1]
        for base in range(len(code1)):
            if code1[base] != code2[base]:
                count += 1
    return count


### prot
### translating rna into protein

1.) creating codict (Codon dictionary):
with open("C:/Users/Klumpi/Desktop/Codon_Table.txt", "r") as file:
    filelist = file.read().split()
    codict = {}
    for codon in range(0, len(filelist), 2):
        codict[filelist[codon]] = filelist[codon+1]
    print (codict)
    file.close()

2.) prot function
def prot(filename, codict = codict):
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        string = file.read()[:-1]
        protein = ""
        for codon in range(0, len(filelist), 2):
            codict[filelist[codon]] = filelist[codon+1]
        for codon in range(2, len(string), 3):
            if codict[string[codon-2] + string[codon-1] + string[codon]] != "Stop":
                protein += codict[string[codon-2] + string[codon-1] + string[codon]]
            else:
                return protein

### subs
### finding a motif in DNA
def subs(filename):
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        lines = file.read().split()
        code =  lines[0]
        substring = lines[1]
        file.close()
        indices = []
        while code.find(substring) != -1:
            index = code.find(substring)+1
            indices.append(index)
            code = code[index:]
        print (indices)
        
        for index in range(len(indices)-1):
            indices[index+1] += indices[index]
        return indices


### splc
### RNA splicing

1) for input:
def fasta_codes_input(filename):
    with open("C:/Users/Klumpi/Desktop/"+ filename +".txt", "r") as file:
        lines = file.read().split()
        index = 1
        fasta = lines[0]
        codes_dict = {}
        code_list = []
        
        while index < len(lines):
            if index == len(lines) - 1:
                code_list.append(lines[index])
                codes_dict[fasta] = "".join(code_list)
                return codes_dict
                
            if ">" not in lines[index]:
                code_list.append(lines[index])
                index += 1

            else:
                codes_dict[fasta] = "".join(code_list)
                fasta = lines[index]
                code_list = []
                index += 1

2) splc function
def splc(filename):
    dicty = fasta_codes_input(filename)
    codons = codict()
    main_code = list(dicty.values())[0]
    introns = list(dicty.values())[1:]   
    for intron in introns:
        if intron in main_code:
            main_code = main_code.replace(intron, "")
    main_code = RNA(main_code)
    protein = ""
    for codon in range(2, len(main_code), 3):
        if codons[main_code[codon-2] + main_code[codon-1] + main_code[codon]] != "Stop":
            protein += codons[main_code[codon-2] + main_code[codon-1] + main_code[codon]]
        else:
            break
    return protein


### lexf
### Enumerating k-mers Lexicographically

1) lexf function
def lexf(lst, r):
    output = [i for i in itertools.product(lst, repeat = r)]
    return output
2) formatting output
lst = list(input().split())

x = lexf(lst, 4)
for i in x:
    print (*list(i))
    
with open("C:/Users/Klumpi/Desktop/Tests.txt", "r") as file:
    lines = file.read().splitlines()
    for i in lines:
        print ("".join(i.split()))


### fib
### Rabbits and Recurrence Relations

def fib(mamo, k, x = 0, y = 1, month = 0):
    if month == mamo:
        return x
    else:
        month += 1
        return fib(mamo, k, x + y, k*x, month )
        


### cons
### Consensus and Profile

def cons(filename):
    import operator
    x = fasta_codes_input(filename)
    consensus = ""
    matrix =  []
    for i in x:
        matrix.append(list(x[i]))
    A, T, C, G = [],[],[],[]
    output = []
    for col in range(len(matrix[0])):
        counts = {"A": 0, "T": 0, "C": 0, "G": 0}
        inmed = []
        for row in range(len(matrix)):
            if matrix[row][col] == "A":
                counts["A"] += 1
            elif matrix[row][col] == "T":
                counts["T"] += 1
            elif matrix[row][col] == "C":
                counts["C"] += 1
            elif matrix[row][col] == "G":
                counts["G"] += 1
        sorted_counts = sorted(counts.items(), key=operator.itemgetter(1), reverse = True)
        consensus += sorted_counts[0][0]
            
            
        A.append(counts["A"])
        C.append(counts["C"])
        G.append(counts["G"])
        T.append(counts["T"])
    output.append(A)
    output.append(C)
    output.append(G)
    output.append(T)
    print (consensus)
    x = ["A:", "C:", "G:", "T:"]
    for i in range(len(x)):
        print("{} {}".format(x[i], " ".join([str(v) for v in output[i]])))


### revp
### Locating Restriction Sites

def revp(filename):
    from itertools import combinations
    output = []
    with open("C:/Users/Klumpi/Desktop/" + filename + ".txt", "r") as file:
        lines = file.read().splitlines()
        lines.pop(0)
        code = "".join(lines)
        complement = reverseComplement(code)
        n = len(code)
        
        output = []
        for start in range(n):
            for char in range(4,13):
                if (start + char) > n:
                    continue
                temp = code[start:start+char]
                revc = reverseComplement(temp)
                
                
                if temp == revc:
                    output.append((start + 1, char))
        return output
 
 
### lcsm
### Finding a Shared Motif

def lcsm(filename):
    codes = list(fasta_codes_input(filename).values())
    sequence = ""
    if len(codes) > 1 and len(codes[0]) > 0:
        
        for Nuc in range(len(codes[0])):
            for Nuc2 in range(len(codes[0]) - Nuc+1):
                if Nuc2 > len(sequence) and all(codes[0][Nuc:Nuc + Nuc2] in i for i in codes):
                    sequence = codes[0][Nuc:Nuc + Nuc2]
    print(codes)             
    return(sequence)
        

### lgis
### Longest Increasing Subsequence

def lgis(filename):
    with open("C:/Users/Klumpi/Desktop/"+ filename + ".txt", "r") as file:
        lines = file.read().split()
        n = int(lines[0])
        numbers = list(map(int, lines[1:]))
        zerolist = [0]*n
        zerolist2 = [0]*(n+1)
        counter = 0
        for i in range(n):
            Min = 1
            Max = counter
            while Min <= Max:
                middle = (Min+Max)//2
                if (numbers[zerolist2[middle]] < numbers[i]):
                    Min = middle+1
                else:
                    Max = middle-1
            counter2 = Min
            zerolist[i] = zerolist2[counter2-1]
            zerolist2[counter2] = i
            if (counter2 > counter):
                counter = counter2
        lst = []
        ind = zerolist2[counter]
        for i in range(counter-1, -1, -1):
            lst.append(numbers[ind])
            ind = zerolist[ind]
        lenumber = numbers[::-1]
        lelen= len(lenumber)
        newzero = [0]*lelen
        newzero2 = [0]*(lelen+1)
        newcounter = 0
        for k in range(lelen):
            newMin = 1
            newMax = newcounter
            while newMin <= newMax:
                newmiddle = (newMin+newMax)//2
                if (lenumber[newzero2[newmiddle]] < lenumber[k]):
                    newMin = newmiddle+1
                else:
                    newMax = newmiddle-1
            newcounter2 = newMin
            newzero[k] = newzero2[newcounter2-1]
            newzero2[newcounter2] = k
            if newcounter2 > newcounter:
                newcounter = newcounter2
        newlist = []
        newind = newzero2[newcounter]
        for k in range(newcounter-1, -1, -1):
            newlist.append(lenumber[newind])
            newind = newzero[newind]
        output = [lst[::-1], newlist]
        
        
        return output


                
        
       
    
    
    
